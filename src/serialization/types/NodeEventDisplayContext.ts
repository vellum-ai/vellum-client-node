/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as Vellum from "../../api/index";
import * as core from "../../core";

export const NodeEventDisplayContext: core.serialization.ObjectSchema<
    serializers.NodeEventDisplayContext.Raw,
    Vellum.NodeEventDisplayContext
> = core.serialization.object({
    inputDisplay: core.serialization.property(
        "input_display",
        core.serialization.record(core.serialization.string(), core.serialization.string()),
    ),
    outputDisplay: core.serialization.property(
        "output_display",
        core.serialization.record(core.serialization.string(), core.serialization.string()),
    ),
    portDisplay: core.serialization.property(
        "port_display",
        core.serialization.record(core.serialization.string(), core.serialization.string()),
    ),
    subworkflowDisplay: core.serialization.property(
        "subworkflow_display",
        core.serialization.lazyObject(() => serializers.WorkflowEventDisplayContext).optional(),
    ),
});

export declare namespace NodeEventDisplayContext {
    export interface Raw {
        input_display: Record<string, string>;
        output_display: Record<string, string>;
        port_display: Record<string, string>;
        subworkflow_display?: serializers.WorkflowEventDisplayContext.Raw | null;
    }
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as Vellum from "../../api/index";
import * as core from "../../core";

export const WorkflowResolvedState: core.serialization.ObjectSchema<
    serializers.WorkflowResolvedState.Raw,
    Vellum.WorkflowResolvedState
> = core.serialization.object({
    traceId: core.serialization.property("trace_id", core.serialization.string()),
    timestamp: core.serialization.date(),
    spanId: core.serialization.property("span_id", core.serialization.string()),
    state: core.serialization.record(core.serialization.string(), core.serialization.unknown()),
    previousSpanId: core.serialization.property("previous_span_id", core.serialization.string().optionalNullable()),
    previousTraceId: core.serialization.property("previous_trace_id", core.serialization.string().optionalNullable()),
    rootSpanId: core.serialization.property("root_span_id", core.serialization.string().optionalNullable()),
    rootTraceId: core.serialization.property("root_trace_id", core.serialization.string().optionalNullable()),
});

export declare namespace WorkflowResolvedState {
    export interface Raw {
        trace_id: string;
        timestamp: string;
        span_id: string;
        state: Record<string, unknown>;
        previous_span_id?: (string | null) | null;
        previous_trace_id?: (string | null) | null;
        root_span_id?: (string | null) | null;
        root_trace_id?: (string | null) | null;
    }
}

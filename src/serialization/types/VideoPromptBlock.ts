/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as Vellum from "../../api/index";
import * as core from "../../core";
import { PromptBlockState } from "./PromptBlockState";
import { EphemeralPromptCacheConfig } from "./EphemeralPromptCacheConfig";

export const VideoPromptBlock: core.serialization.ObjectSchema<
    serializers.VideoPromptBlock.Raw,
    Vellum.VideoPromptBlock
> = core.serialization.object({
    blockType: core.serialization.property("block_type", core.serialization.stringLiteral("VIDEO")),
    state: PromptBlockState.optional(),
    cacheConfig: core.serialization.property("cache_config", EphemeralPromptCacheConfig.optionalNullable()),
    src: core.serialization.string(),
    metadata: core.serialization.record(core.serialization.string(), core.serialization.unknown()).optionalNullable(),
});

export declare namespace VideoPromptBlock {
    export interface Raw {
        block_type: "VIDEO";
        state?: PromptBlockState.Raw | null;
        cache_config?: (EphemeralPromptCacheConfig.Raw | null) | null;
        src: string;
        metadata?: (Record<string, unknown> | null) | null;
    }
}

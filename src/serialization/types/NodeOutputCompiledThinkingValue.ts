/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as Vellum from "../../api/index";
import * as core from "../../core";
import { StringVellumValue } from "./StringVellumValue";
import { WorkflowNodeResultEventState } from "./WorkflowNodeResultEventState";

export const NodeOutputCompiledThinkingValue: core.serialization.ObjectSchema<
    serializers.NodeOutputCompiledThinkingValue.Raw,
    Vellum.NodeOutputCompiledThinkingValue
> = core.serialization.object({
    type: core.serialization.stringLiteral("THINKING"),
    value: StringVellumValue.optionalNullable(),
    nodeOutputId: core.serialization.property("node_output_id", core.serialization.string()),
    state: WorkflowNodeResultEventState.optional(),
});

export declare namespace NodeOutputCompiledThinkingValue {
    export interface Raw {
        type: "THINKING";
        value?: (StringVellumValue.Raw | null) | null;
        node_output_id: string;
        state?: WorkflowNodeResultEventState.Raw | null;
    }
}

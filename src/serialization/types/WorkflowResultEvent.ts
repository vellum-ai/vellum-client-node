/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as Vellum from "../../api/index";
import * as core from "../../core";
import { WorkflowNodeResultEventState } from "./WorkflowNodeResultEventState";
import { WorkflowResultEventOutputData } from "./WorkflowResultEventOutputData";
import { WorkflowEventError } from "./WorkflowEventError";
import { WorkflowOutput } from "./WorkflowOutput";
import { ExecutionVellumValue } from "./ExecutionVellumValue";

export const WorkflowResultEvent: core.serialization.ObjectSchema<
    serializers.WorkflowResultEvent.Raw,
    Vellum.WorkflowResultEvent
> = core.serialization.object({
    id: core.serialization.string(),
    state: WorkflowNodeResultEventState,
    ts: core.serialization.date(),
    output: WorkflowResultEventOutputData.optionalNullable(),
    error: WorkflowEventError.optionalNullable(),
    outputs: core.serialization.list(WorkflowOutput).optionalNullable(),
    inputs: core.serialization.list(ExecutionVellumValue).optionalNullable(),
});

export declare namespace WorkflowResultEvent {
    export interface Raw {
        id: string;
        state: WorkflowNodeResultEventState.Raw;
        ts: string;
        output?: (WorkflowResultEventOutputData.Raw | null) | null;
        error?: (WorkflowEventError.Raw | null) | null;
        outputs?: (WorkflowOutput.Raw[] | null) | null;
        inputs?: (ExecutionVellumValue.Raw[] | null) | null;
    }
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as Vellum from "../../api/index";
import * as core from "../../core";
import { MetadataFilterRuleCombinator } from "./MetadataFilterRuleCombinator";
import { LogicalOperator } from "./LogicalOperator";

export const MetadataFilterConfigRequest: core.serialization.ObjectSchema<
    serializers.MetadataFilterConfigRequest.Raw,
    Vellum.MetadataFilterConfigRequest
> = core.serialization.object({
    combinator: MetadataFilterRuleCombinator.optionalNullable(),
    negated: core.serialization.boolean().optionalNullable(),
    rules: core.serialization
        .list(core.serialization.lazyObject(() => serializers.MetadataFilterRuleRequest))
        .optionalNullable(),
    field: core.serialization.string().optionalNullable(),
    operator: LogicalOperator.optionalNullable(),
    value: core.serialization.string().optionalNullable(),
});

export declare namespace MetadataFilterConfigRequest {
    export interface Raw {
        combinator?: (MetadataFilterRuleCombinator.Raw | null) | null;
        negated?: (boolean | null) | null;
        rules?: (serializers.MetadataFilterRuleRequest.Raw[] | null) | null;
        field?: (string | null) | null;
        operator?: (LogicalOperator.Raw | null) | null;
        value?: (string | null) | null;
    }
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as Vellum from "../../api/index";
import * as core from "../../core";
import { PromptBlockState } from "./PromptBlockState";
import { ComponentsSchemasEphemeralPromptCacheConfig } from "./ComponentsSchemasEphemeralPromptCacheConfig";

export const ImagePromptBlock: core.serialization.ObjectSchema<
    serializers.ImagePromptBlock.Raw,
    Vellum.ImagePromptBlock
> = core.serialization.object({
    blockType: core.serialization.property("block_type", core.serialization.stringLiteral("IMAGE")),
    state: PromptBlockState.optional(),
    cacheConfig: core.serialization.property("cache_config", ComponentsSchemasEphemeralPromptCacheConfig.optional()),
    src: core.serialization.string(),
    metadata: core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional(),
});

export declare namespace ImagePromptBlock {
    export interface Raw {
        block_type: "IMAGE";
        state?: PromptBlockState.Raw | null;
        cache_config?: ComponentsSchemasEphemeralPromptCacheConfig.Raw | null;
        src: string;
        metadata?: Record<string, unknown> | null;
    }
}

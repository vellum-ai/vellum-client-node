/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../index";
import * as Vellum from "../../../../../api/index";
import * as core from "../../../../../core";
import { DocumentStatus } from "../../../../types/DocumentStatus";

export const PatchedDocumentUpdateRequest: core.serialization.Schema<
    serializers.PatchedDocumentUpdateRequest.Raw,
    Vellum.PatchedDocumentUpdateRequest
> = core.serialization.object({
    label: core.serialization.string().optional(),
    status: DocumentStatus.optional(),
    keywords: core.serialization.list(core.serialization.string()).optional(),
    metadata: core.serialization.record(core.serialization.string(), core.serialization.unknown()).optionalNullable(),
});

export declare namespace PatchedDocumentUpdateRequest {
    export interface Raw {
        label?: string | null;
        status?: DocumentStatus.Raw | null;
        keywords?: string[] | null;
        metadata?: (Record<string, unknown> | null) | null;
    }
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Vellum from "../../../index";
import * as stream from "stream";
import * as serializers from "../../../../serialization/index";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index";
import * as fs from "fs";
import { Blob } from "buffer";
import { toJson } from "../../../../core/json";

export declare namespace Workflows {
    export interface Options {
        environment?: core.Supplier<environments.VellumEnvironment | environments.VellumEnvironmentUrls>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey: core.Supplier<string>;
        /** Override the X-API-Version header */
        apiVersion?: core.Supplier<Vellum.ApiVersionEnum | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the X-API-Version header */
        apiVersion?: Vellum.ApiVersionEnum | undefined;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class Workflows {
    constructor(protected readonly _options: Workflows.Options) {}

    /**
     * @throws {@link Vellum.BadRequestError}
     */
    public pull(
        id: string,
        request: Vellum.WorkflowsPullRequest = {},
        requestOptions?: Workflows.RequestOptions,
    ): core.HttpResponsePromise<stream.Readable> {
        return core.HttpResponsePromise.fromPromise(this.__pull(id, request, requestOptions));
    }

    private async __pull(
        id: string,
        request: Vellum.WorkflowsPullRequest = {},
        requestOptions?: Workflows.RequestOptions,
    ): Promise<core.WithRawResponse<stream.Readable>> {
        const { excludeCode, excludeDisplay, includeJson, includeSandbox, strict } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (excludeCode !== undefined) {
            _queryParams["exclude_code"] = excludeCode?.toString() ?? null;
        }

        if (excludeDisplay !== undefined) {
            _queryParams["exclude_display"] = excludeDisplay?.toString() ?? null;
        }

        if (includeJson !== undefined) {
            _queryParams["include_json"] = includeJson?.toString() ?? null;
        }

        if (includeSandbox !== undefined) {
            _queryParams["include_sandbox"] = includeSandbox?.toString() ?? null;
        }

        if (strict !== undefined) {
            _queryParams["strict"] = strict?.toString() ?? null;
        }

        const _response = await core.fetcher<stream.Readable>({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    ((await core.Supplier.get(this._options.environment)) ?? environments.VellumEnvironment.Production)
                        .default,
                `v1/workflows/${encodeURIComponent(id)}/pull`,
            ),
            method: "GET",
            headers: {
                "X-API-Version":
                    (await core.Supplier.get(this._options.apiVersion)) != null
                        ? serializers.ApiVersionEnum.jsonOrThrow(await core.Supplier.get(this._options.apiVersion), {
                              unrecognizedObjectKeys: "strip",
                          })
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "vellum-ai",
                "X-Fern-SDK-Version": "1.2.4",
                "User-Agent": "vellum-ai/1.2.4",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            responseType: "streaming",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Vellum.BadRequestError(_response.error.body, _response.rawResponse);
                default:
                    throw new errors.VellumError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.VellumError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.VellumTimeoutError("Timeout exceeded when calling GET /v1/workflows/{id}/pull.");
            case "unknown":
                throw new errors.VellumError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {File | fs.ReadStream | Blob | undefined} artifact
     * @param {Vellum.WorkflowPushRequest} request
     * @param {Workflows.RequestOptions} requestOptions - Request-specific configuration.
     */
    public push(
        artifact: File | fs.ReadStream | Blob | undefined,
        request: Vellum.WorkflowPushRequest,
        requestOptions?: Workflows.RequestOptions,
    ): core.HttpResponsePromise<Vellum.WorkflowPushResponse> {
        return core.HttpResponsePromise.fromPromise(this.__push(artifact, request, requestOptions));
    }

    private async __push(
        artifact: File | fs.ReadStream | Blob | undefined,
        request: Vellum.WorkflowPushRequest,
        requestOptions?: Workflows.RequestOptions,
    ): Promise<core.WithRawResponse<Vellum.WorkflowPushResponse>> {
        const _request = await core.newFormData();
        _request.append(
            "exec_config",
            serializers.WorkflowPushExecConfig.jsonOrThrow(request.execConfig, { unrecognizedObjectKeys: "strip" }),
        );
        if (request.workflowSandboxId != null) {
            _request.append("workflow_sandbox_id", request.workflowSandboxId);
        }

        if (request.deploymentConfig != null) {
            _request.append(
                "deployment_config",
                toJson(
                    serializers.WorkflowPushDeploymentConfigRequest.jsonOrThrow(request.deploymentConfig, {
                        unrecognizedObjectKeys: "strip",
                    }),
                ),
            );
        }

        if (artifact != null) {
            await _request.appendFile("artifact", artifact);
        }

        if (request.dryRun != null) {
            _request.append("dry_run", request.dryRun.toString());
        }

        if (request.strict != null) {
            _request.append("strict", request.strict.toString());
        }

        const _maybeEncodedRequest = await _request.getRequest();
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    ((await core.Supplier.get(this._options.environment)) ?? environments.VellumEnvironment.Production)
                        .default,
                "v1/workflows/push",
            ),
            method: "POST",
            headers: {
                "X-API-Version":
                    (await core.Supplier.get(this._options.apiVersion)) != null
                        ? serializers.ApiVersionEnum.jsonOrThrow(await core.Supplier.get(this._options.apiVersion), {
                              unrecognizedObjectKeys: "strip",
                          })
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "vellum-ai",
                "X-Fern-SDK-Version": "1.2.4",
                "User-Agent": "vellum-ai/1.2.4",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ..._maybeEncodedRequest.headers,
                ...requestOptions?.headers,
            },
            requestType: "file",
            duplex: _maybeEncodedRequest.duplex,
            body: _maybeEncodedRequest.body,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.WorkflowPushResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.VellumError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.VellumError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.VellumTimeoutError("Timeout exceeded when calling POST /v1/workflows/push.");
            case "unknown":
                throw new errors.VellumError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getCustomAuthorizationHeaders() {
        const apiKeyValue = await core.Supplier.get(this._options.apiKey);
        return { "X-API-KEY": apiKeyValue };
    }
}

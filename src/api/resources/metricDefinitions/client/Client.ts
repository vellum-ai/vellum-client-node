/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Vellum from "../../../index";
import * as serializers from "../../../../serialization/index";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index";

export declare namespace MetricDefinitions {
    export interface Options {
        environment?: core.Supplier<environments.VellumEnvironment | environments.VellumEnvironmentUrls>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey: core.Supplier<string>;
        /** Override the X-API-Version header */
        apiVersion?: core.Supplier<Vellum.ApiVersionEnum | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the X-API-Version header */
        apiVersion?: Vellum.ApiVersionEnum | undefined;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class MetricDefinitions {
    constructor(protected readonly _options: MetricDefinitions.Options) {}

    /**
     * @param {string} id - Either the Metric Definition's ID or its unique name
     * @param {Vellum.ExecuteMetricDefinition} request
     * @param {MetricDefinitions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.metricDefinitions.executeMetricDefinition("id", {
     *         inputs: [{
     *                 name: "x",
     *                 type: "STRING",
     *                 value: "value"
     *             }, {
     *                 name: "x",
     *                 type: "STRING",
     *                 value: "value"
     *             }]
     *     })
     */
    public executeMetricDefinition(
        id: string,
        request: Vellum.ExecuteMetricDefinition,
        requestOptions?: MetricDefinitions.RequestOptions,
    ): core.HttpResponsePromise<Vellum.MetricDefinitionExecution> {
        return core.HttpResponsePromise.fromPromise(this.__executeMetricDefinition(id, request, requestOptions));
    }

    private async __executeMetricDefinition(
        id: string,
        request: Vellum.ExecuteMetricDefinition,
        requestOptions?: MetricDefinitions.RequestOptions,
    ): Promise<core.WithRawResponse<Vellum.MetricDefinitionExecution>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    ((await core.Supplier.get(this._options.environment)) ?? environments.VellumEnvironment.Production)
                        .predict,
                `v1/metric-definitions/${encodeURIComponent(id)}/execute`,
            ),
            method: "POST",
            headers: {
                "X-API-Version":
                    (await core.Supplier.get(this._options.apiVersion)) != null
                        ? serializers.ApiVersionEnum.jsonOrThrow(await core.Supplier.get(this._options.apiVersion), {
                              unrecognizedObjectKeys: "strip",
                          })
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "vellum-ai",
                "X-Fern-SDK-Version": "1.5.7",
                "User-Agent": "vellum-ai/1.5.7",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.ExecuteMetricDefinition.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.MetricDefinitionExecution.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.VellumError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.VellumError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.VellumTimeoutError(
                    "Timeout exceeded when calling POST /v1/metric-definitions/{id}/execute.",
                );
            case "unknown":
                throw new errors.VellumError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {string} historyIdOrReleaseTag - Either the UUID of Metric Definition History Item you'd like to retrieve, or the name of a Release Tag that's pointing to the Metric Definition History Item you'd like to retrieve.
     * @param {string} id - A UUID string identifying this metric definition.
     * @param {MetricDefinitions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.metricDefinitions.metricDefinitionHistoryItemRetrieve("history_id_or_release_tag", "id")
     */
    public metricDefinitionHistoryItemRetrieve(
        historyIdOrReleaseTag: string,
        id: string,
        requestOptions?: MetricDefinitions.RequestOptions,
    ): core.HttpResponsePromise<Vellum.MetricDefinitionHistoryItem> {
        return core.HttpResponsePromise.fromPromise(
            this.__metricDefinitionHistoryItemRetrieve(historyIdOrReleaseTag, id, requestOptions),
        );
    }

    private async __metricDefinitionHistoryItemRetrieve(
        historyIdOrReleaseTag: string,
        id: string,
        requestOptions?: MetricDefinitions.RequestOptions,
    ): Promise<core.WithRawResponse<Vellum.MetricDefinitionHistoryItem>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    ((await core.Supplier.get(this._options.environment)) ?? environments.VellumEnvironment.Production)
                        .default,
                `v1/metric-definitions/${encodeURIComponent(id)}/history/${encodeURIComponent(historyIdOrReleaseTag)}`,
            ),
            method: "GET",
            headers: {
                "X-API-Version":
                    (await core.Supplier.get(this._options.apiVersion)) != null
                        ? serializers.ApiVersionEnum.jsonOrThrow(await core.Supplier.get(this._options.apiVersion), {
                              unrecognizedObjectKeys: "strip",
                          })
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "vellum-ai",
                "X-Fern-SDK-Version": "1.5.7",
                "User-Agent": "vellum-ai/1.5.7",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.MetricDefinitionHistoryItem.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.VellumError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.VellumError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.VellumTimeoutError(
                    "Timeout exceeded when calling GET /v1/metric-definitions/{id}/history/{history_id_or_release_tag}.",
                );
            case "unknown":
                throw new errors.VellumError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getCustomAuthorizationHeaders() {
        const apiKeyValue = await core.Supplier.get(this._options.apiKey);
        return { "X-API-KEY": apiKeyValue };
    }
}

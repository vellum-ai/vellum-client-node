/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Vellum from "../../../index";
import * as serializers from "../../../../serialization/index";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index";

export declare namespace WorkflowDeployments {
    export interface Options {
        environment?: core.Supplier<environments.VellumEnvironment | environments.VellumEnvironmentUrls>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey: core.Supplier<string>;
        /** Override the X-API-Version header */
        apiVersion?: core.Supplier<Vellum.ApiVersionEnum | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the X-API-Version header */
        apiVersion?: Vellum.ApiVersionEnum | undefined;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class WorkflowDeployments {
    constructor(protected readonly _options: WorkflowDeployments.Options) {}

    /**
     * Used to list all Workflow Deployments.
     *
     * @param {Vellum.WorkflowDeploymentsListRequest} request
     * @param {WorkflowDeployments.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.workflowDeployments.list()
     */
    public list(
        request: Vellum.WorkflowDeploymentsListRequest = {},
        requestOptions?: WorkflowDeployments.RequestOptions,
    ): core.HttpResponsePromise<Vellum.PaginatedSlimWorkflowDeploymentList> {
        return core.HttpResponsePromise.fromPromise(this.__list(request, requestOptions));
    }

    private async __list(
        request: Vellum.WorkflowDeploymentsListRequest = {},
        requestOptions?: WorkflowDeployments.RequestOptions,
    ): Promise<core.WithRawResponse<Vellum.PaginatedSlimWorkflowDeploymentList>> {
        const { limit, offset, ordering, status } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (limit !== undefined) {
            _queryParams["limit"] = limit?.toString() ?? null;
        }

        if (offset !== undefined) {
            _queryParams["offset"] = offset?.toString() ?? null;
        }

        if (ordering !== undefined) {
            _queryParams["ordering"] = ordering;
        }

        if (status !== undefined) {
            _queryParams["status"] = serializers.WorkflowDeploymentsListRequestStatus.jsonOrThrow(status, {
                unrecognizedObjectKeys: "strip",
            });
        }

        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    ((await core.Supplier.get(this._options.environment)) ?? environments.VellumEnvironment.Production)
                        .default,
                "v1/workflow-deployments",
            ),
            method: "GET",
            headers: {
                "X-API-Version":
                    (await core.Supplier.get(this._options.apiVersion)) != null
                        ? serializers.ApiVersionEnum.jsonOrThrow(await core.Supplier.get(this._options.apiVersion), {
                              unrecognizedObjectKeys: "strip",
                          })
                        : "2025-07-30",
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "vellum-ai",
                "X-Fern-SDK-Version": "1.5.1",
                "User-Agent": "vellum-ai/1.5.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.PaginatedSlimWorkflowDeploymentList.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.VellumError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.VellumError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.VellumTimeoutError("Timeout exceeded when calling GET /v1/workflow-deployments.");
            case "unknown":
                throw new errors.VellumError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Used to retrieve a workflow deployment given its ID or name.
     *
     * @param {string} id - Either the Workflow Deployment's ID or its unique name
     * @param {WorkflowDeployments.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.workflowDeployments.retrieve("id")
     */
    public retrieve(
        id: string,
        requestOptions?: WorkflowDeployments.RequestOptions,
    ): core.HttpResponsePromise<Vellum.WorkflowDeploymentRead> {
        return core.HttpResponsePromise.fromPromise(this.__retrieve(id, requestOptions));
    }

    private async __retrieve(
        id: string,
        requestOptions?: WorkflowDeployments.RequestOptions,
    ): Promise<core.WithRawResponse<Vellum.WorkflowDeploymentRead>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    ((await core.Supplier.get(this._options.environment)) ?? environments.VellumEnvironment.Production)
                        .default,
                `v1/workflow-deployments/${encodeURIComponent(id)}`,
            ),
            method: "GET",
            headers: {
                "X-API-Version":
                    (await core.Supplier.get(this._options.apiVersion)) != null
                        ? serializers.ApiVersionEnum.jsonOrThrow(await core.Supplier.get(this._options.apiVersion), {
                              unrecognizedObjectKeys: "strip",
                          })
                        : "2025-07-30",
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "vellum-ai",
                "X-Fern-SDK-Version": "1.5.1",
                "User-Agent": "vellum-ai/1.5.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.WorkflowDeploymentRead.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.VellumError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.VellumError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.VellumTimeoutError("Timeout exceeded when calling GET /v1/workflow-deployments/{id}.");
            case "unknown":
                throw new errors.VellumError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {string} id
     * @param {Vellum.ListWorkflowDeploymentEventExecutionsRequest} request
     * @param {WorkflowDeployments.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.workflowDeployments.listWorkflowDeploymentEventExecutions("id")
     */
    public listWorkflowDeploymentEventExecutions(
        id: string,
        request: Vellum.ListWorkflowDeploymentEventExecutionsRequest = {},
        requestOptions?: WorkflowDeployments.RequestOptions,
    ): core.HttpResponsePromise<Vellum.WorkflowDeploymentEventExecutionsResponse> {
        return core.HttpResponsePromise.fromPromise(
            this.__listWorkflowDeploymentEventExecutions(id, request, requestOptions),
        );
    }

    private async __listWorkflowDeploymentEventExecutions(
        id: string,
        request: Vellum.ListWorkflowDeploymentEventExecutionsRequest = {},
        requestOptions?: WorkflowDeployments.RequestOptions,
    ): Promise<core.WithRawResponse<Vellum.WorkflowDeploymentEventExecutionsResponse>> {
        const { filters, limit, offset } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (filters !== undefined) {
            _queryParams["filters"] = filters;
        }

        if (limit !== undefined) {
            _queryParams["limit"] = limit?.toString() ?? null;
        }

        if (offset !== undefined) {
            _queryParams["offset"] = offset?.toString() ?? null;
        }

        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    ((await core.Supplier.get(this._options.environment)) ?? environments.VellumEnvironment.Production)
                        .default,
                `v1/workflow-deployments/${encodeURIComponent(id)}/execution-events`,
            ),
            method: "GET",
            headers: {
                "X-API-Version":
                    (await core.Supplier.get(this._options.apiVersion)) != null
                        ? serializers.ApiVersionEnum.jsonOrThrow(await core.Supplier.get(this._options.apiVersion), {
                              unrecognizedObjectKeys: "strip",
                          })
                        : "2025-07-30",
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "vellum-ai",
                "X-Fern-SDK-Version": "1.5.1",
                "User-Agent": "vellum-ai/1.5.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.WorkflowDeploymentEventExecutionsResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.VellumError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.VellumError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.VellumTimeoutError(
                    "Timeout exceeded when calling GET /v1/workflow-deployments/{id}/execution-events.",
                );
            case "unknown":
                throw new errors.VellumError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {string} executionId
     * @param {string} id
     * @param {WorkflowDeployments.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.workflowDeployments.workflowDeploymentEventExecution("execution_id", "id")
     */
    public workflowDeploymentEventExecution(
        executionId: string,
        id: string,
        requestOptions?: WorkflowDeployments.RequestOptions,
    ): core.HttpResponsePromise<Vellum.WorkflowEventExecutionRead> {
        return core.HttpResponsePromise.fromPromise(
            this.__workflowDeploymentEventExecution(executionId, id, requestOptions),
        );
    }

    private async __workflowDeploymentEventExecution(
        executionId: string,
        id: string,
        requestOptions?: WorkflowDeployments.RequestOptions,
    ): Promise<core.WithRawResponse<Vellum.WorkflowEventExecutionRead>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    ((await core.Supplier.get(this._options.environment)) ?? environments.VellumEnvironment.Production)
                        .default,
                `v1/workflow-deployments/${encodeURIComponent(id)}/execution-events/${encodeURIComponent(executionId)}`,
            ),
            method: "GET",
            headers: {
                "X-API-Version":
                    (await core.Supplier.get(this._options.apiVersion)) != null
                        ? serializers.ApiVersionEnum.jsonOrThrow(await core.Supplier.get(this._options.apiVersion), {
                              unrecognizedObjectKeys: "strip",
                          })
                        : "2025-07-30",
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "vellum-ai",
                "X-Fern-SDK-Version": "1.5.1",
                "User-Agent": "vellum-ai/1.5.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.WorkflowEventExecutionRead.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.VellumError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.VellumError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.VellumTimeoutError(
                    "Timeout exceeded when calling GET /v1/workflow-deployments/{id}/execution-events/{execution_id}.",
                );
            case "unknown":
                throw new errors.VellumError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * DEPRECATED: This endpoint is deprecated and will be removed in a future release. Please use the
     * `retrieve_workflow_deployment_release` endpoint instead.
     *
     * @param {string} historyIdOrReleaseTag - Either the UUID of Workflow Deployment History Item you'd like to retrieve, or the name of a Release Tag that's pointing to the Workflow Deployment History Item you'd like to retrieve.
     * @param {string} id - Either the Workflow Deployment's ID or its unique name
     * @param {WorkflowDeployments.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.workflowDeployments.workflowDeploymentHistoryItemRetrieve("history_id_or_release_tag", "id")
     */
    public workflowDeploymentHistoryItemRetrieve(
        historyIdOrReleaseTag: string,
        id: string,
        requestOptions?: WorkflowDeployments.RequestOptions,
    ): core.HttpResponsePromise<Vellum.WorkflowDeploymentHistoryItem> {
        return core.HttpResponsePromise.fromPromise(
            this.__workflowDeploymentHistoryItemRetrieve(historyIdOrReleaseTag, id, requestOptions),
        );
    }

    private async __workflowDeploymentHistoryItemRetrieve(
        historyIdOrReleaseTag: string,
        id: string,
        requestOptions?: WorkflowDeployments.RequestOptions,
    ): Promise<core.WithRawResponse<Vellum.WorkflowDeploymentHistoryItem>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    ((await core.Supplier.get(this._options.environment)) ?? environments.VellumEnvironment.Production)
                        .default,
                `v1/workflow-deployments/${encodeURIComponent(id)}/history/${encodeURIComponent(historyIdOrReleaseTag)}`,
            ),
            method: "GET",
            headers: {
                "X-API-Version":
                    (await core.Supplier.get(this._options.apiVersion)) != null
                        ? serializers.ApiVersionEnum.jsonOrThrow(await core.Supplier.get(this._options.apiVersion), {
                              unrecognizedObjectKeys: "strip",
                          })
                        : "2025-07-30",
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "vellum-ai",
                "X-Fern-SDK-Version": "1.5.1",
                "User-Agent": "vellum-ai/1.5.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.WorkflowDeploymentHistoryItem.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.VellumError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.VellumError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.VellumTimeoutError(
                    "Timeout exceeded when calling GET /v1/workflow-deployments/{id}/history/{history_id_or_release_tag}.",
                );
            case "unknown":
                throw new errors.VellumError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * List Release Tags associated with the specified Workflow Deployment
     *
     * @param {string} id - Either the Workflow Deployment's ID or its unique name
     * @param {Vellum.ListWorkflowReleaseTagsRequest} request
     * @param {WorkflowDeployments.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.workflowDeployments.listWorkflowReleaseTags("id")
     */
    public listWorkflowReleaseTags(
        id: string,
        request: Vellum.ListWorkflowReleaseTagsRequest = {},
        requestOptions?: WorkflowDeployments.RequestOptions,
    ): core.HttpResponsePromise<Vellum.PaginatedWorkflowReleaseTagReadList> {
        return core.HttpResponsePromise.fromPromise(this.__listWorkflowReleaseTags(id, request, requestOptions));
    }

    private async __listWorkflowReleaseTags(
        id: string,
        request: Vellum.ListWorkflowReleaseTagsRequest = {},
        requestOptions?: WorkflowDeployments.RequestOptions,
    ): Promise<core.WithRawResponse<Vellum.PaginatedWorkflowReleaseTagReadList>> {
        const { limit, offset, ordering, source } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (limit !== undefined) {
            _queryParams["limit"] = limit?.toString() ?? null;
        }

        if (offset !== undefined) {
            _queryParams["offset"] = offset?.toString() ?? null;
        }

        if (ordering !== undefined) {
            _queryParams["ordering"] = ordering;
        }

        if (source !== undefined) {
            _queryParams["source"] = serializers.ListWorkflowReleaseTagsRequestSource.jsonOrThrow(source, {
                unrecognizedObjectKeys: "strip",
            });
        }

        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    ((await core.Supplier.get(this._options.environment)) ?? environments.VellumEnvironment.Production)
                        .default,
                `v1/workflow-deployments/${encodeURIComponent(id)}/release-tags`,
            ),
            method: "GET",
            headers: {
                "X-API-Version":
                    (await core.Supplier.get(this._options.apiVersion)) != null
                        ? serializers.ApiVersionEnum.jsonOrThrow(await core.Supplier.get(this._options.apiVersion), {
                              unrecognizedObjectKeys: "strip",
                          })
                        : "2025-07-30",
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "vellum-ai",
                "X-Fern-SDK-Version": "1.5.1",
                "User-Agent": "vellum-ai/1.5.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.PaginatedWorkflowReleaseTagReadList.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.VellumError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.VellumError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.VellumTimeoutError(
                    "Timeout exceeded when calling GET /v1/workflow-deployments/{id}/release-tags.",
                );
            case "unknown":
                throw new errors.VellumError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Retrieve a Workflow Release Tag by tag name, associated with a specified Workflow Deployment.
     *
     * @param {string} id - Either the Workflow Deployment's ID or its unique name
     * @param {string} name - The name of the Release Tag associated with this Workflow Deployment that you'd like to retrieve.
     * @param {WorkflowDeployments.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.workflowDeployments.retrieveWorkflowReleaseTag("id", "name")
     */
    public retrieveWorkflowReleaseTag(
        id: string,
        name: string,
        requestOptions?: WorkflowDeployments.RequestOptions,
    ): core.HttpResponsePromise<Vellum.WorkflowReleaseTagRead> {
        return core.HttpResponsePromise.fromPromise(this.__retrieveWorkflowReleaseTag(id, name, requestOptions));
    }

    private async __retrieveWorkflowReleaseTag(
        id: string,
        name: string,
        requestOptions?: WorkflowDeployments.RequestOptions,
    ): Promise<core.WithRawResponse<Vellum.WorkflowReleaseTagRead>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    ((await core.Supplier.get(this._options.environment)) ?? environments.VellumEnvironment.Production)
                        .default,
                `v1/workflow-deployments/${encodeURIComponent(id)}/release-tags/${encodeURIComponent(name)}`,
            ),
            method: "GET",
            headers: {
                "X-API-Version":
                    (await core.Supplier.get(this._options.apiVersion)) != null
                        ? serializers.ApiVersionEnum.jsonOrThrow(await core.Supplier.get(this._options.apiVersion), {
                              unrecognizedObjectKeys: "strip",
                          })
                        : "2025-07-30",
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "vellum-ai",
                "X-Fern-SDK-Version": "1.5.1",
                "User-Agent": "vellum-ai/1.5.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.WorkflowReleaseTagRead.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.VellumError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.VellumError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.VellumTimeoutError(
                    "Timeout exceeded when calling GET /v1/workflow-deployments/{id}/release-tags/{name}.",
                );
            case "unknown":
                throw new errors.VellumError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Updates an existing Release Tag associated with the specified Workflow Deployment.
     *
     * @param {string} id - Either the Workflow Deployment's ID or its unique name
     * @param {string} name - The name of the Release Tag associated with this Workflow Deployment that you'd like to update.
     * @param {Vellum.PatchedWorkflowReleaseTagUpdateRequest} request
     * @param {WorkflowDeployments.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.workflowDeployments.updateWorkflowReleaseTag("id", "name")
     */
    public updateWorkflowReleaseTag(
        id: string,
        name: string,
        request: Vellum.PatchedWorkflowReleaseTagUpdateRequest = {},
        requestOptions?: WorkflowDeployments.RequestOptions,
    ): core.HttpResponsePromise<Vellum.WorkflowReleaseTagRead> {
        return core.HttpResponsePromise.fromPromise(this.__updateWorkflowReleaseTag(id, name, request, requestOptions));
    }

    private async __updateWorkflowReleaseTag(
        id: string,
        name: string,
        request: Vellum.PatchedWorkflowReleaseTagUpdateRequest = {},
        requestOptions?: WorkflowDeployments.RequestOptions,
    ): Promise<core.WithRawResponse<Vellum.WorkflowReleaseTagRead>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    ((await core.Supplier.get(this._options.environment)) ?? environments.VellumEnvironment.Production)
                        .default,
                `v1/workflow-deployments/${encodeURIComponent(id)}/release-tags/${encodeURIComponent(name)}`,
            ),
            method: "PATCH",
            headers: {
                "X-API-Version":
                    (await core.Supplier.get(this._options.apiVersion)) != null
                        ? serializers.ApiVersionEnum.jsonOrThrow(await core.Supplier.get(this._options.apiVersion), {
                              unrecognizedObjectKeys: "strip",
                          })
                        : "2025-07-30",
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "vellum-ai",
                "X-Fern-SDK-Version": "1.5.1",
                "User-Agent": "vellum-ai/1.5.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.PatchedWorkflowReleaseTagUpdateRequest.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.WorkflowReleaseTagRead.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.VellumError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.VellumError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.VellumTimeoutError(
                    "Timeout exceeded when calling PATCH /v1/workflow-deployments/{id}/release-tags/{name}.",
                );
            case "unknown":
                throw new errors.VellumError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Retrieve a specific Workflow Deployment Release by either its UUID or the name of a Release Tag that points to it.
     *
     * @param {string} id - Either the Workflow Deployment's ID or its unique name
     * @param {string} releaseIdOrReleaseTag - Either the UUID of Workflow Deployment Release you'd like to retrieve, or the name of a Release Tag that's pointing to the Workflow Deployment Release you'd like to retrieve.
     * @param {WorkflowDeployments.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.workflowDeployments.retrieveWorkflowDeploymentRelease("id", "release_id_or_release_tag")
     */
    public retrieveWorkflowDeploymentRelease(
        id: string,
        releaseIdOrReleaseTag: string,
        requestOptions?: WorkflowDeployments.RequestOptions,
    ): core.HttpResponsePromise<Vellum.WorkflowDeploymentRelease> {
        return core.HttpResponsePromise.fromPromise(
            this.__retrieveWorkflowDeploymentRelease(id, releaseIdOrReleaseTag, requestOptions),
        );
    }

    private async __retrieveWorkflowDeploymentRelease(
        id: string,
        releaseIdOrReleaseTag: string,
        requestOptions?: WorkflowDeployments.RequestOptions,
    ): Promise<core.WithRawResponse<Vellum.WorkflowDeploymentRelease>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    ((await core.Supplier.get(this._options.environment)) ?? environments.VellumEnvironment.Production)
                        .default,
                `v1/workflow-deployments/${encodeURIComponent(id)}/releases/${encodeURIComponent(releaseIdOrReleaseTag)}`,
            ),
            method: "GET",
            headers: {
                "X-API-Version":
                    (await core.Supplier.get(this._options.apiVersion)) != null
                        ? serializers.ApiVersionEnum.jsonOrThrow(await core.Supplier.get(this._options.apiVersion), {
                              unrecognizedObjectKeys: "strip",
                          })
                        : "2025-07-30",
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "vellum-ai",
                "X-Fern-SDK-Version": "1.5.1",
                "User-Agent": "vellum-ai/1.5.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.WorkflowDeploymentRelease.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.VellumError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.VellumError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.VellumTimeoutError(
                    "Timeout exceeded when calling GET /v1/workflow-deployments/{id}/releases/{release_id_or_release_tag}.",
                );
            case "unknown":
                throw new errors.VellumError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getCustomAuthorizationHeaders() {
        const apiKeyValue = await core.Supplier.get(this._options.apiKey);
        return { "X-API-KEY": apiKeyValue };
    }
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Vellum from "../../../index";
import * as serializers from "../../../../serialization/index";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index";

export declare namespace Integrations {
    export interface Options {
        environment?: core.Supplier<environments.VellumEnvironment | environments.VellumEnvironmentUrls>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey: core.Supplier<string>;
        /** Override the X-API-Version header */
        apiVersion?: core.Supplier<Vellum.ApiVersionEnum | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the X-API-Version header */
        apiVersion?: Vellum.ApiVersionEnum | undefined;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class Integrations {
    constructor(protected readonly _options: Integrations.Options) {}

    /**
     * @param {string} integration - The integration name
     * @param {string} provider - The integration provider name
     * @param {string} toolName - The tool's unique name, as specified by the integration provider
     * @param {Integrations.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.integrations.retrieveIntegrationToolDefinition("integration", "provider", "tool_name")
     */
    public retrieveIntegrationToolDefinition(
        integration: string,
        provider: string,
        toolName: string,
        requestOptions?: Integrations.RequestOptions,
    ): core.HttpResponsePromise<Vellum.ComponentsSchemasComposioToolDefinition> {
        return core.HttpResponsePromise.fromPromise(
            this.__retrieveIntegrationToolDefinition(integration, provider, toolName, requestOptions),
        );
    }

    private async __retrieveIntegrationToolDefinition(
        integration: string,
        provider: string,
        toolName: string,
        requestOptions?: Integrations.RequestOptions,
    ): Promise<core.WithRawResponse<Vellum.ComponentsSchemasComposioToolDefinition>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    ((await core.Supplier.get(this._options.environment)) ?? environments.VellumEnvironment.Production)
                        .default,
                `integrations/v1/providers/${encodeURIComponent(provider)}/integrations/${encodeURIComponent(integration)}/tools/${encodeURIComponent(toolName)}`,
            ),
            method: "GET",
            headers: {
                "X-API-Version":
                    (await core.Supplier.get(this._options.apiVersion)) != null
                        ? serializers.ApiVersionEnum.jsonOrThrow(await core.Supplier.get(this._options.apiVersion), {
                              unrecognizedObjectKeys: "strip",
                          })
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "vellum-ai",
                "X-Fern-SDK-Version": "1.5.1",
                "User-Agent": "vellum-ai/1.5.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.ComponentsSchemasComposioToolDefinition.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.VellumError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.VellumError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.VellumTimeoutError(
                    "Timeout exceeded when calling GET /integrations/v1/providers/{provider}/integrations/{integration}/tools/{tool_name}.",
                );
            case "unknown":
                throw new errors.VellumError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {string} integration - The integration name
     * @param {string} provider - The integration provider name
     * @param {string} toolName - The tool's unique name, as specified by the integration provider
     * @param {Vellum.ComponentsSchemasComposioExecuteToolRequest} request
     * @param {Integrations.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Vellum.BadRequestError}
     *
     * @example
     *     await client.integrations.executeIntegrationTool("integration", "provider", "tool_name", {
     *         provider: "COMPOSIO",
     *         arguments: {
     *             "arguments": {
     *                 "key": "value"
     *             }
     *         }
     *     })
     */
    public executeIntegrationTool(
        integration: string,
        provider: string,
        toolName: string,
        request: Vellum.ComponentsSchemasComposioExecuteToolRequest,
        requestOptions?: Integrations.RequestOptions,
    ): core.HttpResponsePromise<Vellum.ComponentsSchemasComposioExecuteToolResponse> {
        return core.HttpResponsePromise.fromPromise(
            this.__executeIntegrationTool(integration, provider, toolName, request, requestOptions),
        );
    }

    private async __executeIntegrationTool(
        integration: string,
        provider: string,
        toolName: string,
        request: Vellum.ComponentsSchemasComposioExecuteToolRequest,
        requestOptions?: Integrations.RequestOptions,
    ): Promise<core.WithRawResponse<Vellum.ComponentsSchemasComposioExecuteToolResponse>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    ((await core.Supplier.get(this._options.environment)) ?? environments.VellumEnvironment.Production)
                        .default,
                `integrations/v1/providers/${encodeURIComponent(provider)}/integrations/${encodeURIComponent(integration)}/tools/${encodeURIComponent(toolName)}/execute`,
            ),
            method: "POST",
            headers: {
                "X-API-Version":
                    (await core.Supplier.get(this._options.apiVersion)) != null
                        ? serializers.ApiVersionEnum.jsonOrThrow(await core.Supplier.get(this._options.apiVersion), {
                              unrecognizedObjectKeys: "strip",
                          })
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "vellum-ai",
                "X-Fern-SDK-Version": "1.5.1",
                "User-Agent": "vellum-ai/1.5.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.ComponentsSchemasComposioExecuteToolRequest.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.ComponentsSchemasComposioExecuteToolResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Vellum.BadRequestError(_response.error.body, _response.rawResponse);
                default:
                    throw new errors.VellumError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.VellumError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.VellumTimeoutError(
                    "Timeout exceeded when calling POST /integrations/v1/providers/{provider}/integrations/{integration}/tools/{tool_name}/execute.",
                );
            case "unknown":
                throw new errors.VellumError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getCustomAuthorizationHeaders() {
        const apiKeyValue = await core.Supplier.get(this._options.apiKey);
        return { "X-API-KEY": apiKeyValue };
    }
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "./environments";
import * as core from "./core";
import * as Vellum from "./api/index";
import * as serializers from "./serialization/index";
import urlJoin from "url-join";
import * as errors from "./errors/index";
import * as stream from "stream";
import { Integrations } from "./api/resources/integrations/client/Client";
import { Events } from "./api/resources/events/client/Client";
import { AdHoc } from "./api/resources/adHoc/client/Client";
import { ContainerImages } from "./api/resources/containerImages/client/Client";
import { Deployments } from "./api/resources/deployments/client/Client";
import { DocumentIndexes } from "./api/resources/documentIndexes/client/Client";
import { Documents } from "./api/resources/documents/client/Client";
import { FolderEntities } from "./api/resources/folderEntities/client/Client";
import { IntegrationAuthConfigs } from "./api/resources/integrationAuthConfigs/client/Client";
import { IntegrationProviders } from "./api/resources/integrationProviders/client/Client";
import { MetricDefinitions } from "./api/resources/metricDefinitions/client/Client";
import { MlModels } from "./api/resources/mlModels/client/Client";
import { Organizations } from "./api/resources/organizations/client/Client";
import { Prompts } from "./api/resources/prompts/client/Client";
import { Sandboxes } from "./api/resources/sandboxes/client/Client";
import { TestSuiteRuns } from "./api/resources/testSuiteRuns/client/Client";
import { TestSuites } from "./api/resources/testSuites/client/Client";
import { WorkflowDeployments } from "./api/resources/workflowDeployments/client/Client";
import { WorkflowExecutions } from "./api/resources/workflowExecutions/client/Client";
import { WorkflowSandboxes } from "./api/resources/workflowSandboxes/client/Client";
import { Workflows } from "./api/resources/workflows/client/Client";
import { WorkspaceSecrets } from "./api/resources/workspaceSecrets/client/Client";
import { Workspaces } from "./api/resources/workspaces/client/Client";

export declare namespace VellumClient {
    export interface Options {
        environment?: core.Supplier<environments.VellumEnvironment | environments.VellumEnvironmentUrls>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey: core.Supplier<string>;
        /** Override the X-API-Version header */
        apiVersion?: core.Supplier<Vellum.ApiVersionEnum | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the X-API-Version header */
        apiVersion?: Vellum.ApiVersionEnum | undefined;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class VellumClient {
    protected _integrations: Integrations | undefined;
    protected _events: Events | undefined;
    protected _adHoc: AdHoc | undefined;
    protected _containerImages: ContainerImages | undefined;
    protected _deployments: Deployments | undefined;
    protected _documentIndexes: DocumentIndexes | undefined;
    protected _documents: Documents | undefined;
    protected _folderEntities: FolderEntities | undefined;
    protected _integrationAuthConfigs: IntegrationAuthConfigs | undefined;
    protected _integrationProviders: IntegrationProviders | undefined;
    protected _metricDefinitions: MetricDefinitions | undefined;
    protected _mlModels: MlModels | undefined;
    protected _organizations: Organizations | undefined;
    protected _prompts: Prompts | undefined;
    protected _sandboxes: Sandboxes | undefined;
    protected _testSuiteRuns: TestSuiteRuns | undefined;
    protected _testSuites: TestSuites | undefined;
    protected _workflowDeployments: WorkflowDeployments | undefined;
    protected _workflowExecutions: WorkflowExecutions | undefined;
    protected _workflowSandboxes: WorkflowSandboxes | undefined;
    protected _workflows: Workflows | undefined;
    protected _workspaceSecrets: WorkspaceSecrets | undefined;
    protected _workspaces: Workspaces | undefined;

    constructor(protected readonly _options: VellumClient.Options) {}

    public get integrations(): Integrations {
        return (this._integrations ??= new Integrations(this._options));
    }

    public get events(): Events {
        return (this._events ??= new Events(this._options));
    }

    public get adHoc(): AdHoc {
        return (this._adHoc ??= new AdHoc(this._options));
    }

    public get containerImages(): ContainerImages {
        return (this._containerImages ??= new ContainerImages(this._options));
    }

    public get deployments(): Deployments {
        return (this._deployments ??= new Deployments(this._options));
    }

    public get documentIndexes(): DocumentIndexes {
        return (this._documentIndexes ??= new DocumentIndexes(this._options));
    }

    public get documents(): Documents {
        return (this._documents ??= new Documents(this._options));
    }

    public get folderEntities(): FolderEntities {
        return (this._folderEntities ??= new FolderEntities(this._options));
    }

    public get integrationAuthConfigs(): IntegrationAuthConfigs {
        return (this._integrationAuthConfigs ??= new IntegrationAuthConfigs(this._options));
    }

    public get integrationProviders(): IntegrationProviders {
        return (this._integrationProviders ??= new IntegrationProviders(this._options));
    }

    public get metricDefinitions(): MetricDefinitions {
        return (this._metricDefinitions ??= new MetricDefinitions(this._options));
    }

    public get mlModels(): MlModels {
        return (this._mlModels ??= new MlModels(this._options));
    }

    public get organizations(): Organizations {
        return (this._organizations ??= new Organizations(this._options));
    }

    public get prompts(): Prompts {
        return (this._prompts ??= new Prompts(this._options));
    }

    public get sandboxes(): Sandboxes {
        return (this._sandboxes ??= new Sandboxes(this._options));
    }

    public get testSuiteRuns(): TestSuiteRuns {
        return (this._testSuiteRuns ??= new TestSuiteRuns(this._options));
    }

    public get testSuites(): TestSuites {
        return (this._testSuites ??= new TestSuites(this._options));
    }

    public get workflowDeployments(): WorkflowDeployments {
        return (this._workflowDeployments ??= new WorkflowDeployments(this._options));
    }

    public get workflowExecutions(): WorkflowExecutions {
        return (this._workflowExecutions ??= new WorkflowExecutions(this._options));
    }

    public get workflowSandboxes(): WorkflowSandboxes {
        return (this._workflowSandboxes ??= new WorkflowSandboxes(this._options));
    }

    public get workflows(): Workflows {
        return (this._workflows ??= new Workflows(this._options));
    }

    public get workspaceSecrets(): WorkspaceSecrets {
        return (this._workspaceSecrets ??= new WorkspaceSecrets(this._options));
    }

    public get workspaces(): Workspaces {
        return (this._workspaces ??= new Workspaces(this._options));
    }

    /**
     * @param {Vellum.ExecuteApiRequest} request
     * @param {VellumClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.executeApi({
     *         url: "x"
     *     })
     */
    public executeApi(
        request: Vellum.ExecuteApiRequest,
        requestOptions?: VellumClient.RequestOptions,
    ): core.HttpResponsePromise<Vellum.ExecuteApiResponse> {
        return core.HttpResponsePromise.fromPromise(this.__executeApi(request, requestOptions));
    }

    private async __executeApi(
        request: Vellum.ExecuteApiRequest,
        requestOptions?: VellumClient.RequestOptions,
    ): Promise<core.WithRawResponse<Vellum.ExecuteApiResponse>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    ((await core.Supplier.get(this._options.environment)) ?? environments.VellumEnvironment.Production)
                        .default,
                "v1/execute-api",
            ),
            method: "POST",
            headers: {
                "X-API-Version":
                    (await core.Supplier.get(this._options.apiVersion)) != null
                        ? serializers.ApiVersionEnum.jsonOrThrow(await core.Supplier.get(this._options.apiVersion), {
                              unrecognizedObjectKeys: "strip",
                          })
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "vellum-ai",
                "X-Fern-SDK-Version": "1.6.0",
                "User-Agent": "vellum-ai/1.6.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.ExecuteApiRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.ExecuteApiResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.VellumError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.VellumError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.VellumTimeoutError("Timeout exceeded when calling POST /v1/execute-api.");
            case "unknown":
                throw new errors.VellumError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {Vellum.CodeExecutor} request
     * @param {VellumClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Vellum.BadRequestError}
     *
     * @example
     *     await client.executeCode({
     *         code: "x",
     *         runtime: "PYTHON_3_11_6",
     *         inputValues: [{
     *                 name: "x",
     *                 type: "STRING",
     *                 value: "value"
     *             }, {
     *                 name: "x",
     *                 type: "STRING",
     *                 value: "value"
     *             }],
     *         packages: [{
     *                 version: "version",
     *                 name: "name"
     *             }, {
     *                 version: "version",
     *                 name: "name"
     *             }],
     *         outputType: "STRING"
     *     })
     */
    public executeCode(
        request: Vellum.CodeExecutor,
        requestOptions?: VellumClient.RequestOptions,
    ): core.HttpResponsePromise<Vellum.CodeExecutorResponse> {
        return core.HttpResponsePromise.fromPromise(this.__executeCode(request, requestOptions));
    }

    private async __executeCode(
        request: Vellum.CodeExecutor,
        requestOptions?: VellumClient.RequestOptions,
    ): Promise<core.WithRawResponse<Vellum.CodeExecutorResponse>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    ((await core.Supplier.get(this._options.environment)) ?? environments.VellumEnvironment.Production)
                        .predict,
                "v1/execute-code",
            ),
            method: "POST",
            headers: {
                "X-API-Version":
                    (await core.Supplier.get(this._options.apiVersion)) != null
                        ? serializers.ApiVersionEnum.jsonOrThrow(await core.Supplier.get(this._options.apiVersion), {
                              unrecognizedObjectKeys: "strip",
                          })
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "vellum-ai",
                "X-Fern-SDK-Version": "1.6.0",
                "User-Agent": "vellum-ai/1.6.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.CodeExecutor.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.CodeExecutorResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Vellum.BadRequestError(_response.error.body, _response.rawResponse);
                default:
                    throw new errors.VellumError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.VellumError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.VellumTimeoutError("Timeout exceeded when calling POST /v1/execute-code.");
            case "unknown":
                throw new errors.VellumError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Executes a deployed Prompt and returns the result.
     *
     * @param {Vellum.ExecutePromptRequest} request
     * @param {VellumClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Vellum.BadRequestError}
     * @throws {@link Vellum.ForbiddenError}
     * @throws {@link Vellum.NotFoundError}
     * @throws {@link Vellum.InternalServerError}
     *
     * @example
     *     await client.executePrompt({
     *         inputs: [{
     *                 name: "x",
     *                 type: "STRING",
     *                 value: "value"
     *             }, {
     *                 name: "x",
     *                 type: "STRING",
     *                 value: "value"
     *             }]
     *     })
     */
    public executePrompt(
        request: Vellum.ExecutePromptRequest,
        requestOptions?: VellumClient.RequestOptions,
    ): core.HttpResponsePromise<Vellum.ExecutePromptResponse> {
        return core.HttpResponsePromise.fromPromise(this.__executePrompt(request, requestOptions));
    }

    private async __executePrompt(
        request: Vellum.ExecutePromptRequest,
        requestOptions?: VellumClient.RequestOptions,
    ): Promise<core.WithRawResponse<Vellum.ExecutePromptResponse>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    ((await core.Supplier.get(this._options.environment)) ?? environments.VellumEnvironment.Production)
                        .predict,
                "v1/execute-prompt",
            ),
            method: "POST",
            headers: {
                "X-API-Version":
                    (await core.Supplier.get(this._options.apiVersion)) != null
                        ? serializers.ApiVersionEnum.jsonOrThrow(await core.Supplier.get(this._options.apiVersion), {
                              unrecognizedObjectKeys: "strip",
                          })
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "vellum-ai",
                "X-Fern-SDK-Version": "1.6.0",
                "User-Agent": "vellum-ai/1.6.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.ExecutePromptRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.ExecutePromptResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Vellum.BadRequestError(_response.error.body, _response.rawResponse);
                case 403:
                    throw new Vellum.ForbiddenError(_response.error.body, _response.rawResponse);
                case 404:
                    throw new Vellum.NotFoundError(_response.error.body, _response.rawResponse);
                case 500:
                    throw new Vellum.InternalServerError(_response.error.body, _response.rawResponse);
                default:
                    throw new errors.VellumError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.VellumError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.VellumTimeoutError("Timeout exceeded when calling POST /v1/execute-prompt.");
            case "unknown":
                throw new errors.VellumError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Executes a deployed Prompt and streams back the results.
     */
    public executePromptStream(
        request: Vellum.ExecutePromptStreamRequest,
        requestOptions?: VellumClient.RequestOptions,
    ): core.HttpResponsePromise<core.Stream<Vellum.ExecutePromptEvent>> {
        return core.HttpResponsePromise.fromPromise(this.__executePromptStream(request, requestOptions));
    }

    private async __executePromptStream(
        request: Vellum.ExecutePromptStreamRequest,
        requestOptions?: VellumClient.RequestOptions,
    ): Promise<core.WithRawResponse<core.Stream<Vellum.ExecutePromptEvent>>> {
        const _response = await core.fetcher<stream.Readable>({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    ((await core.Supplier.get(this._options.environment)) ?? environments.VellumEnvironment.Production)
                        .predict,
                "v1/execute-prompt-stream",
            ),
            method: "POST",
            headers: {
                "X-API-Version":
                    (await core.Supplier.get(this._options.apiVersion)) != null
                        ? serializers.ApiVersionEnum.jsonOrThrow(await core.Supplier.get(this._options.apiVersion), {
                              unrecognizedObjectKeys: "strip",
                          })
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "vellum-ai",
                "X-Fern-SDK-Version": "1.6.0",
                "User-Agent": "vellum-ai/1.6.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.ExecutePromptStreamRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            responseType: "sse",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: new core.Stream({
                    stream: _response.body,
                    parse: async (data) => {
                        return serializers.ExecutePromptEvent.parseOrThrow(data, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        });
                    },
                    signal: requestOptions?.abortSignal,
                    eventShape: {
                        type: "json",
                        messageTerminator: "\n",
                    },
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Vellum.BadRequestError(_response.error.body, _response.rawResponse);
                case 403:
                    throw new Vellum.ForbiddenError(_response.error.body, _response.rawResponse);
                case 404:
                    throw new Vellum.NotFoundError(_response.error.body, _response.rawResponse);
                case 500:
                    throw new Vellum.InternalServerError(_response.error.body, _response.rawResponse);
                default:
                    throw new errors.VellumError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.VellumError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.VellumTimeoutError("Timeout exceeded when calling POST /v1/execute-prompt-stream.");
            case "unknown":
                throw new errors.VellumError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Executes a deployed Workflow and returns its outputs.
     *
     * @param {Vellum.ExecuteWorkflowRequest} request
     * @param {VellumClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Vellum.BadRequestError}
     * @throws {@link Vellum.NotFoundError}
     * @throws {@link Vellum.InternalServerError}
     *
     * @example
     *     await client.executeWorkflow({
     *         inputs: [{
     *                 name: "x",
     *                 type: "STRING",
     *                 value: "value"
     *             }, {
     *                 name: "x",
     *                 type: "STRING",
     *                 value: "value"
     *             }]
     *     })
     */
    public executeWorkflow(
        request: Vellum.ExecuteWorkflowRequest,
        requestOptions?: VellumClient.RequestOptions,
    ): core.HttpResponsePromise<Vellum.ExecuteWorkflowResponse> {
        return core.HttpResponsePromise.fromPromise(this.__executeWorkflow(request, requestOptions));
    }

    private async __executeWorkflow(
        request: Vellum.ExecuteWorkflowRequest,
        requestOptions?: VellumClient.RequestOptions,
    ): Promise<core.WithRawResponse<Vellum.ExecuteWorkflowResponse>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    ((await core.Supplier.get(this._options.environment)) ?? environments.VellumEnvironment.Production)
                        .predict,
                "v1/execute-workflow",
            ),
            method: "POST",
            headers: {
                "X-API-Version":
                    (await core.Supplier.get(this._options.apiVersion)) != null
                        ? serializers.ApiVersionEnum.jsonOrThrow(await core.Supplier.get(this._options.apiVersion), {
                              unrecognizedObjectKeys: "strip",
                          })
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "vellum-ai",
                "X-Fern-SDK-Version": "1.6.0",
                "User-Agent": "vellum-ai/1.6.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.ExecuteWorkflowRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.ExecuteWorkflowResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Vellum.BadRequestError(_response.error.body, _response.rawResponse);
                case 404:
                    throw new Vellum.NotFoundError(_response.error.body, _response.rawResponse);
                case 500:
                    throw new Vellum.InternalServerError(_response.error.body, _response.rawResponse);
                default:
                    throw new errors.VellumError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.VellumError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.VellumTimeoutError("Timeout exceeded when calling POST /v1/execute-workflow.");
            case "unknown":
                throw new errors.VellumError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Executes a deployed Workflow and streams back its results.
     */
    public executeWorkflowStream(
        request: Vellum.ExecuteWorkflowStreamRequest,
        requestOptions?: VellumClient.RequestOptions,
    ): core.HttpResponsePromise<core.Stream<Vellum.WorkflowStreamEvent>> {
        return core.HttpResponsePromise.fromPromise(this.__executeWorkflowStream(request, requestOptions));
    }

    private async __executeWorkflowStream(
        request: Vellum.ExecuteWorkflowStreamRequest,
        requestOptions?: VellumClient.RequestOptions,
    ): Promise<core.WithRawResponse<core.Stream<Vellum.WorkflowStreamEvent>>> {
        const _response = await core.fetcher<stream.Readable>({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    ((await core.Supplier.get(this._options.environment)) ?? environments.VellumEnvironment.Production)
                        .predict,
                "v1/execute-workflow-stream",
            ),
            method: "POST",
            headers: {
                "X-API-Version":
                    (await core.Supplier.get(this._options.apiVersion)) != null
                        ? serializers.ApiVersionEnum.jsonOrThrow(await core.Supplier.get(this._options.apiVersion), {
                              unrecognizedObjectKeys: "strip",
                          })
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "vellum-ai",
                "X-Fern-SDK-Version": "1.6.0",
                "User-Agent": "vellum-ai/1.6.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.ExecuteWorkflowStreamRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            responseType: "sse",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: new core.Stream({
                    stream: _response.body,
                    parse: async (data) => {
                        return serializers.WorkflowStreamEvent.parseOrThrow(data, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        });
                    },
                    signal: requestOptions?.abortSignal,
                    eventShape: {
                        type: "json",
                        messageTerminator: "\n",
                    },
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Vellum.BadRequestError(_response.error.body, _response.rawResponse);
                case 404:
                    throw new Vellum.NotFoundError(_response.error.body, _response.rawResponse);
                case 500:
                    throw new Vellum.InternalServerError(_response.error.body, _response.rawResponse);
                default:
                    throw new errors.VellumError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.VellumError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.VellumTimeoutError("Timeout exceeded when calling POST /v1/execute-workflow-stream.");
            case "unknown":
                throw new errors.VellumError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Generate a completion using a previously defined deployment.
     *
     * Important: This endpoint is DEPRECATED and has been superseded by
     * [execute-prompt](/api-reference/api-reference/execute-prompt).
     *
     * @param {Vellum.GenerateBodyRequest} request
     * @param {VellumClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Vellum.BadRequestError}
     * @throws {@link Vellum.ForbiddenError}
     * @throws {@link Vellum.NotFoundError}
     * @throws {@link Vellum.InternalServerError}
     *
     * @example
     *     await client.generate({
     *         requests: [{
     *                 inputValues: {
     *                     "input_values": {
     *                         "key": "value"
     *                     }
     *                 }
     *             }, {
     *                 inputValues: {
     *                     "input_values": {
     *                         "key": "value"
     *                     }
     *                 }
     *             }]
     *     })
     */
    public generate(
        request: Vellum.GenerateBodyRequest,
        requestOptions?: VellumClient.RequestOptions,
    ): core.HttpResponsePromise<Vellum.GenerateResponse> {
        return core.HttpResponsePromise.fromPromise(this.__generate(request, requestOptions));
    }

    private async __generate(
        request: Vellum.GenerateBodyRequest,
        requestOptions?: VellumClient.RequestOptions,
    ): Promise<core.WithRawResponse<Vellum.GenerateResponse>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    ((await core.Supplier.get(this._options.environment)) ?? environments.VellumEnvironment.Production)
                        .predict,
                "v1/generate",
            ),
            method: "POST",
            headers: {
                "X-API-Version":
                    (await core.Supplier.get(this._options.apiVersion)) != null
                        ? serializers.ApiVersionEnum.jsonOrThrow(await core.Supplier.get(this._options.apiVersion), {
                              unrecognizedObjectKeys: "strip",
                          })
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "vellum-ai",
                "X-Fern-SDK-Version": "1.6.0",
                "User-Agent": "vellum-ai/1.6.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.GenerateBodyRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.GenerateResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Vellum.BadRequestError(_response.error.body, _response.rawResponse);
                case 403:
                    throw new Vellum.ForbiddenError(_response.error.body, _response.rawResponse);
                case 404:
                    throw new Vellum.NotFoundError(_response.error.body, _response.rawResponse);
                case 500:
                    throw new Vellum.InternalServerError(_response.error.body, _response.rawResponse);
                default:
                    throw new errors.VellumError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.VellumError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.VellumTimeoutError("Timeout exceeded when calling POST /v1/generate.");
            case "unknown":
                throw new errors.VellumError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Generate a stream of completions using a previously defined deployment.
     *
     * Important: This endpoint is DEPRECATED and has been superseded by
     * [execute-prompt-stream](/api-reference/api-reference/execute-prompt-stream).
     */
    public generateStream(
        request: Vellum.GenerateStreamBodyRequest,
        requestOptions?: VellumClient.RequestOptions,
    ): core.HttpResponsePromise<core.Stream<Vellum.GenerateStreamResponse>> {
        return core.HttpResponsePromise.fromPromise(this.__generateStream(request, requestOptions));
    }

    private async __generateStream(
        request: Vellum.GenerateStreamBodyRequest,
        requestOptions?: VellumClient.RequestOptions,
    ): Promise<core.WithRawResponse<core.Stream<Vellum.GenerateStreamResponse>>> {
        const _response = await core.fetcher<stream.Readable>({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    ((await core.Supplier.get(this._options.environment)) ?? environments.VellumEnvironment.Production)
                        .predict,
                "v1/generate-stream",
            ),
            method: "POST",
            headers: {
                "X-API-Version":
                    (await core.Supplier.get(this._options.apiVersion)) != null
                        ? serializers.ApiVersionEnum.jsonOrThrow(await core.Supplier.get(this._options.apiVersion), {
                              unrecognizedObjectKeys: "strip",
                          })
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "vellum-ai",
                "X-Fern-SDK-Version": "1.6.0",
                "User-Agent": "vellum-ai/1.6.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.GenerateStreamBodyRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            responseType: "sse",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: new core.Stream({
                    stream: _response.body,
                    parse: async (data) => {
                        return serializers.GenerateStreamResponse.parseOrThrow(data, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        });
                    },
                    signal: requestOptions?.abortSignal,
                    eventShape: {
                        type: "json",
                        messageTerminator: "\n",
                    },
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Vellum.BadRequestError(_response.error.body, _response.rawResponse);
                case 403:
                    throw new Vellum.ForbiddenError(_response.error.body, _response.rawResponse);
                case 404:
                    throw new Vellum.NotFoundError(_response.error.body, _response.rawResponse);
                case 500:
                    throw new Vellum.InternalServerError(_response.error.body, _response.rawResponse);
                default:
                    throw new errors.VellumError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.VellumError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.VellumTimeoutError("Timeout exceeded when calling POST /v1/generate-stream.");
            case "unknown":
                throw new errors.VellumError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Perform a search against a document index.
     *
     * @param {Vellum.SearchRequestBodyRequest} request
     * @param {VellumClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Vellum.BadRequestError}
     * @throws {@link Vellum.NotFoundError}
     * @throws {@link Vellum.InternalServerError}
     *
     * @example
     *     await client.search({
     *         query: "x"
     *     })
     */
    public search(
        request: Vellum.SearchRequestBodyRequest,
        requestOptions?: VellumClient.RequestOptions,
    ): core.HttpResponsePromise<Vellum.SearchResponse> {
        return core.HttpResponsePromise.fromPromise(this.__search(request, requestOptions));
    }

    private async __search(
        request: Vellum.SearchRequestBodyRequest,
        requestOptions?: VellumClient.RequestOptions,
    ): Promise<core.WithRawResponse<Vellum.SearchResponse>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    ((await core.Supplier.get(this._options.environment)) ?? environments.VellumEnvironment.Production)
                        .predict,
                "v1/search",
            ),
            method: "POST",
            headers: {
                "X-API-Version":
                    (await core.Supplier.get(this._options.apiVersion)) != null
                        ? serializers.ApiVersionEnum.jsonOrThrow(await core.Supplier.get(this._options.apiVersion), {
                              unrecognizedObjectKeys: "strip",
                          })
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "vellum-ai",
                "X-Fern-SDK-Version": "1.6.0",
                "User-Agent": "vellum-ai/1.6.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.SearchRequestBodyRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.SearchResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Vellum.BadRequestError(_response.error.body, _response.rawResponse);
                case 404:
                    throw new Vellum.NotFoundError(_response.error.body, _response.rawResponse);
                case 500:
                    throw new Vellum.InternalServerError(_response.error.body, _response.rawResponse);
                default:
                    throw new errors.VellumError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.VellumError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.VellumTimeoutError("Timeout exceeded when calling POST /v1/search.");
            case "unknown":
                throw new errors.VellumError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Used to submit feedback regarding the quality of previously generated completions.
     *
     * @param {Vellum.SubmitCompletionActualsRequest} request
     * @param {VellumClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Vellum.BadRequestError}
     * @throws {@link Vellum.NotFoundError}
     * @throws {@link Vellum.InternalServerError}
     *
     * @example
     *     await client.submitCompletionActuals({
     *         actuals: [{}, {}]
     *     })
     */
    public submitCompletionActuals(
        request: Vellum.SubmitCompletionActualsRequest,
        requestOptions?: VellumClient.RequestOptions,
    ): core.HttpResponsePromise<void> {
        return core.HttpResponsePromise.fromPromise(this.__submitCompletionActuals(request, requestOptions));
    }

    private async __submitCompletionActuals(
        request: Vellum.SubmitCompletionActualsRequest,
        requestOptions?: VellumClient.RequestOptions,
    ): Promise<core.WithRawResponse<void>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    ((await core.Supplier.get(this._options.environment)) ?? environments.VellumEnvironment.Production)
                        .predict,
                "v1/submit-completion-actuals",
            ),
            method: "POST",
            headers: {
                "X-API-Version":
                    (await core.Supplier.get(this._options.apiVersion)) != null
                        ? serializers.ApiVersionEnum.jsonOrThrow(await core.Supplier.get(this._options.apiVersion), {
                              unrecognizedObjectKeys: "strip",
                          })
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "vellum-ai",
                "X-Fern-SDK-Version": "1.6.0",
                "User-Agent": "vellum-ai/1.6.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.SubmitCompletionActualsRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: undefined, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Vellum.BadRequestError(_response.error.body, _response.rawResponse);
                case 404:
                    throw new Vellum.NotFoundError(_response.error.body, _response.rawResponse);
                case 500:
                    throw new Vellum.InternalServerError(_response.error.body, _response.rawResponse);
                default:
                    throw new errors.VellumError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.VellumError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.VellumTimeoutError(
                    "Timeout exceeded when calling POST /v1/submit-completion-actuals.",
                );
            case "unknown":
                throw new errors.VellumError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     *     Used to submit feedback regarding the quality of previous workflow execution and its outputs.
     *
     *     **Note:** Uses a base url of `https://predict.vellum.ai`.
     *
     * @param {Vellum.SubmitWorkflowExecutionActualsRequest} request
     * @param {VellumClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.submitWorkflowExecutionActuals({
     *         actuals: [{
     *                 outputType: "STRING"
     *             }, {
     *                 outputType: "STRING"
     *             }]
     *     })
     */
    public submitWorkflowExecutionActuals(
        request: Vellum.SubmitWorkflowExecutionActualsRequest,
        requestOptions?: VellumClient.RequestOptions,
    ): core.HttpResponsePromise<void> {
        return core.HttpResponsePromise.fromPromise(this.__submitWorkflowExecutionActuals(request, requestOptions));
    }

    private async __submitWorkflowExecutionActuals(
        request: Vellum.SubmitWorkflowExecutionActualsRequest,
        requestOptions?: VellumClient.RequestOptions,
    ): Promise<core.WithRawResponse<void>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    ((await core.Supplier.get(this._options.environment)) ?? environments.VellumEnvironment.Production)
                        .predict,
                "v1/submit-workflow-execution-actuals",
            ),
            method: "POST",
            headers: {
                "X-API-Version":
                    (await core.Supplier.get(this._options.apiVersion)) != null
                        ? serializers.ApiVersionEnum.jsonOrThrow(await core.Supplier.get(this._options.apiVersion), {
                              unrecognizedObjectKeys: "strip",
                          })
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "vellum-ai",
                "X-Fern-SDK-Version": "1.6.0",
                "User-Agent": "vellum-ai/1.6.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.SubmitWorkflowExecutionActualsRequest.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: undefined, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.VellumError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.VellumError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.VellumTimeoutError(
                    "Timeout exceeded when calling POST /v1/submit-workflow-execution-actuals.",
                );
            case "unknown":
                throw new errors.VellumError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getCustomAuthorizationHeaders() {
        const apiKeyValue = await core.Supplier.get(this._options.apiKey);
        return { "X-API-KEY": apiKeyValue };
    }
}
